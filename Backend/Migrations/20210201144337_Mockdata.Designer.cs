// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Webshop.Migrations
{
    [DbContext(typeof(WebshopContext))]
    [Migration("20210201144337_Mockdata")]
    partial class Mockdata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Turquoise"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Transparent"
                        });
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adress")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adress = "Gatan 123",
                            City = "Stockholm",
                            FirstName = "John",
                            LastName = "Doe",
                            ZipCode = "123456"
                        },
                        new
                        {
                            Id = 2,
                            Adress = "Gatan 456",
                            City = "Göteborg",
                            FirstName = "Harald",
                            LastName = "Johnson",
                            ZipCode = "654321"
                        });
                });

            modelBuilder.Entity("Format", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Formats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vinyl"
                        });
                });

            modelBuilder.Entity("Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GenreName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreName = "Heavy Metal"
                        },
                        new
                        {
                            Id = 2,
                            GenreName = "Power Metal"
                        },
                        new
                        {
                            Id = 3,
                            GenreName = "Thrash Metal"
                        },
                        new
                        {
                            Id = 4,
                            GenreName = "Death Metal"
                        },
                        new
                        {
                            Id = 5,
                            GenreName = "Proggressive Metal"
                        });
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            DateCreated = new DateTime(2021, 2, 1, 15, 43, 37, 267, DateTimeKind.Local).AddTicks(2163),
                            PaymentMethod = "Visa",
                            TotalPrice = 1310
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            DateCreated = new DateTime(2021, 2, 1, 15, 43, 37, 269, DateTimeKind.Local).AddTicks(8020),
                            PaymentMethod = "MasterCard",
                            TotalPrice = 750
                        });
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FormatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FormatId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 3,
                            Amount = 3,
                            ColorId = 4,
                            FormatId = 2,
                            Price = 1050
                        },
                        new
                        {
                            OrderId = 1,
                            ProductId = 2,
                            Amount = 1,
                            ColorId = 2,
                            FormatId = 1,
                            Price = 260
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 1,
                            Amount = 1,
                            ColorId = 1,
                            FormatId = 1,
                            Price = 250
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 3,
                            Amount = 2,
                            ColorId = 3,
                            FormatId = 2,
                            Price = 500
                        });
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Album")
                        .HasColumnType("TEXT");

                    b.Property<string>("Artist")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("InStock")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpotifyLink")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Album = "Dancing In Hell",
                            Artist = "Eleine",
                            Description = "Eleine releases their third album, a most to listen moment!",
                            ImgUrl = "https://images-na.ssl-images-amazon.com/images/I/81XGcFWuf-L._SL1200_.jpg",
                            InStock = 200,
                            Price = 250,
                            ReleaseDate = new DateTime(2022, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpotifyLink = "https://open.spotify.com/album/0T4ce8P9dnNoA1Nud6Krbq?si=qjZITerQTOGwLuCw3FseqQ"
                        },
                        new
                        {
                            Id = 2,
                            Album = "Legends from Beyond the Galactic Terrorvex",
                            Artist = "Gloryhammer",
                            Description = "Angus McFife is on a new adveture in this awesomepacked album.",
                            ImgUrl = "https://upload.wikimedia.org/wikipedia/en/4/4d/Gloryhammer_-_Legends_from_Beyond_the_Galactic_Terrorvortex.jpg",
                            InStock = 500,
                            Price = 260,
                            ReleaseDate = new DateTime(2019, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpotifyLink = "https://open.spotify.com/album/5EqtPIx96U0AUSzHUu4QGp?si=gZxU3_WvR-qfjMQsUG4t2Q"
                        },
                        new
                        {
                            Id = 3,
                            Album = "Manifest",
                            Artist = "Amaranthe",
                            Description = "Some claim this is the best release from Amaranthe so far. Havn't heard it yet? What are you waiting for!?",
                            ImgUrl = "https://upload.wikimedia.org/wikipedia/en/1/17/Amaranthe_-_Manifest.png",
                            InStock = 700,
                            Price = 350,
                            ReleaseDate = new DateTime(2021, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpotifyLink = "https://open.spotify.com/album/0i8Xkm6i0Ej627KFK7GqJa?si=mvra_NDERumEccvYPd4Ryg"
                        });
                });

            modelBuilder.Entity("ProductColor", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("ProductColor");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 3,
                            ColorId = 4
                        });
                });

            modelBuilder.Entity("ProductFormat", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FormatId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "FormatId");

                    b.HasIndex("FormatId");

                    b.ToTable("ProductFormat");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            FormatId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            FormatId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            FormatId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            FormatId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            FormatId = 2
                        });
                });

            modelBuilder.Entity("ProductGenre", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("ProductGenre");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            GenreId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            GenreId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            GenreId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            GenreId = 2
                        });
                });

            modelBuilder.Entity("TrackList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SongTitle")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("TrackLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            SongTitle = "Enemies",
                            TrackNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 1,
                            SongTitle = "Dancing in Hell",
                            TrackNumber = 2
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 1,
                            SongTitle = "Ava Of Death",
                            TrackNumber = 3
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 2,
                            SongTitle = "Into the Terrorvortex of Kor-Virliath",
                            TrackNumber = 1
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 2,
                            SongTitle = "The Siege of Dunkeld (In Hoots We Trust)",
                            TrackNumber = 2
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 2,
                            SongTitle = "Masters Of The Galaxy",
                            TrackNumber = 3
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 3,
                            SongTitle = "Fearless",
                            TrackNumber = 1
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 3,
                            SongTitle = "Make It Better",
                            TrackNumber = 2
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 3,
                            SongTitle = "Scream My Name",
                            TrackNumber = 3
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 1,
                            SongTitle = "Crawl from the Ashes",
                            TrackNumber = 4
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 1,
                            SongTitle = "As I Breathe",
                            TrackNumber = 5
                        },
                        new
                        {
                            Id = 12,
                            ProductId = 1,
                            SongTitle = "Memoriam",
                            TrackNumber = 6
                        },
                        new
                        {
                            Id = 13,
                            ProductId = 1,
                            SongTitle = "Where Your Rotting Coprse Lie (W.Y.R.C.L.)",
                            TrackNumber = 7
                        },
                        new
                        {
                            Id = 14,
                            ProductId = 1,
                            SongTitle = "All Shall Burn",
                            TrackNumber = 8
                        },
                        new
                        {
                            Id = 15,
                            ProductId = 1,
                            SongTitle = "Die from Within",
                            TrackNumber = 9
                        },
                        new
                        {
                            Id = 16,
                            ProductId = 1,
                            SongTitle = "The World We Knew",
                            TrackNumber = 10
                        },
                        new
                        {
                            Id = 17,
                            ProductId = 1,
                            SongTitle = "Die from Within - Symphonic Version",
                            TrackNumber = 11
                        },
                        new
                        {
                            Id = 18,
                            ProductId = 2,
                            SongTitle = "The Land Of Unicorns",
                            TrackNumber = 4
                        },
                        new
                        {
                            Id = 19,
                            ProductId = 2,
                            SongTitle = "Power of the Laser Dragon",
                            TrackNumber = 5
                        },
                        new
                        {
                            Id = 20,
                            ProductId = 2,
                            SongTitle = "Legendary Enchanted Jetpack",
                            TrackNumber = 6
                        },
                        new
                        {
                            Id = 21,
                            ProductId = 2,
                            SongTitle = "Gloryhammer",
                            TrackNumber = 7
                        },
                        new
                        {
                            Id = 22,
                            ProductId = 2,
                            SongTitle = "Hootsforce",
                            TrackNumber = 8
                        },
                        new
                        {
                            Id = 23,
                            ProductId = 2,
                            SongTitle = "Battle for Eternity",
                            TrackNumber = 9
                        },
                        new
                        {
                            Id = 24,
                            ProductId = 2,
                            SongTitle = "The Fires of Ancient Cosmic Destiny",
                            TrackNumber = 10
                        },
                        new
                        {
                            Id = 25,
                            ProductId = 3,
                            SongTitle = "Viral",
                            TrackNumber = 4
                        },
                        new
                        {
                            Id = 26,
                            ProductId = 3,
                            SongTitle = "Adrenaline",
                            TrackNumber = 5
                        },
                        new
                        {
                            Id = 27,
                            ProductId = 3,
                            SongTitle = "Strong",
                            TrackNumber = 6
                        },
                        new
                        {
                            Id = 28,
                            ProductId = 3,
                            SongTitle = "The Game",
                            TrackNumber = 7
                        },
                        new
                        {
                            Id = 29,
                            ProductId = 3,
                            SongTitle = "Crystalline",
                            TrackNumber = 8
                        },
                        new
                        {
                            Id = 30,
                            ProductId = 3,
                            SongTitle = "Archangel",
                            TrackNumber = 9
                        },
                        new
                        {
                            Id = 31,
                            ProductId = 3,
                            SongTitle = "BOOM!1",
                            TrackNumber = 10
                        },
                        new
                        {
                            Id = 32,
                            ProductId = 3,
                            SongTitle = "Die and Wake Up",
                            TrackNumber = 11
                        },
                        new
                        {
                            Id = 33,
                            ProductId = 3,
                            SongTitle = "Do or Die",
                            TrackNumber = 21
                        });
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Format", "Format")
                        .WithMany()
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Format");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductColor", b =>
                {
                    b.HasOne("Color", "Color")
                        .WithMany("ProductColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany("ProductColor")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductFormat", b =>
                {
                    b.HasOne("Format", "Format")
                        .WithMany("ProductFormats")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany("ProductFormat")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Format");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductGenre", b =>
                {
                    b.HasOne("Genre", "Genre")
                        .WithMany("ProductGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany("ProductGenre")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TrackList", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("TrackList")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Color", b =>
                {
                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Format", b =>
                {
                    b.Navigation("ProductFormats");
                });

            modelBuilder.Entity("Genre", b =>
                {
                    b.Navigation("ProductGenres");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("ProductColor");

                    b.Navigation("ProductFormat");

                    b.Navigation("ProductGenre");

                    b.Navigation("TrackList");
                });
#pragma warning restore 612, 618
        }
    }
}
